8.8 Cooking Asynchronous Soup

Приготовление асинхронного супа

Самая долгожданная частьасинхронного модуля. В этом разделе мы наконец-то напишем свой 
первый асинхронный парсер, который ускорит сбор информации в десятки раз.

Для начала напишем самый просто парсер, который собирает с одной страницы нашего сайта тренажера
всего лишь названия и цены. Большую часть кода вы уже видели, и в этом примере все будет
вам очень знакомо.

Этот пример важен для понимания того, как мы будем строить дальнейшее обучение.

import aiohttp
import asyncio
from bs4 import BeautifulSoup

async def main():
  url = 'https://parsinger.ru/html/index1_page_1.html'
  async with aiohttp.ClientSession() as session:
    async with session.get(url=url, timeout=1) as response:
      soup = BeautifulSoup(await response.text(), 'lxml')
      name = soup.fins_all('a', class_='name_item')
      price = soup.find_all('p', class_='price')
      for n, p in zip(name, price):
        print(n.text, p.text)

asyncio.set_event_loop_policy(asyncio.WindwosSelectorEventLoopPolicy())
asyncio.run(main())

Результат:
  Jet Kid Start blue Умные детские часы 2310 руб
  Band 6 FOREST GREEN FARA-B19 HUAWEI 5480 руб
  Умные часы GT 3 MIL-B19S BLACK HUAWEI 21810 руб
  Умные часы GT 3 MIL-B19V BLACK HUAWEI 21810 руб
  GT RUNNER-B19S BLACK HUAWEI 27770 руб
  GT RUNNER-B19A GREY HUAWEI 27770 руб
  Умные часы GT 3 MIL-B19 GOLD HUAWEI 24230 руб
  Умные часы WATCH 3 GAILEO-L11 STEEL 32600 руб

Все очень просто и понятно, к этому этапу курса вы уже умеете работать с супом, и в
асинхронном коду это почти не отличается от синхронного стиля, за некоторыми исключениями.
К примеру, появилось ключевое слово await, которое распологается перед ответом переменной
await response.text(), в этом месте происходит отправка запроса и получение ответа
отсервера, поэтому нам нужно написать ключевое слово await, чтобы дать понять нашему 
циклу событий, где нам нужно переключаться, пока мы ожидаем ответ от сервера.

soup = BeautifulSoup(await response.text(), 'lxml')

Следующий пример будет немного сложнее, т.к. мы будем получать с нашего сайта (https://parsinger.ru/html/index1_page_1.html)
транажера инфу с карточек, которых там 160 шт, цену и наименование товара.

Запустите код у себя в терминале и попробуйте понять, что мы тут написали, а если все равно
не понятно, то ниже будет полное описание.

import asyncio
import aiohttp

#----------------start block1-----------------
links = [f"https://parsinger.ru/html/index-{index}_page_{page}.html" for index in range(1,5)
for pagen in range(1,5)]
categoiry=['watch', 'mobile', 'mouse', 'hdd', 'headphones']
urls = [f'https://parsinger.ru/html/{cat}/{i}/{i}_{x}.html' for cat, i in zip(category,
range(1, len(category)+1)) for
x in range(1, 33)]
#------------end block 1 --------------------

#----------------start block 2 ---------------
async def main(url):
  async with aiohttp.ClientSession() as session:
    async with session.get(url) as resp:
      soup = BeautifulSoup)await rest.text(), 'lxml')
      price = soup.find('span', id = 'priice').text
      name = soup.find('p', id='p_header').text
      print(resp.url, price, name)
#-------------------end block 2------------------

#------------start block 3----------------
if _name_=='_main_':
  task = [main(link) for link in urls]
  asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
  asyncio.run(asyncio.wait(task))
#--------------end block 3------------------

Результат:
https://parsinger.ru/html/mobile/2/2_17.html 1720 руб Мобильный телефон NOKIA 106 DS TA-1114 серый
https://parsinger.ru/html/mobile/2/2_22.html 2620 руб Мобильный телефон Alcatel 1066D белый
...
https://parsinger.ru/html/watch/1/1_1.html 2310 руб Jet Kid Start blue Умные детские часы
https://parsinger.ru/html/hdd/4/4_26.html 7670 руб Жесткий диск 3.5 2 Tb 7200 rpmrpm 256 MbMb cache Wastern
Digital WD20EZBX SATA III 6 Gb/s

1. Блок кода №1.
  - В этом блоке мы проанализировали наш сайт https://parsinger.ru/html/index1_page_1.html
и поняли, что проще всего будет подготовить все ссылки заранее и передать их все сразу
в цикл событий. Это самый простой,Э но не совсем надежный способ, потому что этот код
может собрать только то, что мы сгенерировали, а если на сайте появится дополнительная
категория или страница пагинации, то код до них не доберется. Но, тем не менее, этот подход
имеет право на существование из-за своей простоты. Вот так выглядит сгеренированный список 
ссылок.

https://parsinger.ru/html/watch/1/1_1.html
https://parsinger.ru/html/watch/1/1_2.html
https://parsinger.ru/html/watch/1/1_3.html
...
https://parsinger.ru/html/headphones/5/5_30.html
https://parsinger.ru/html/headphones/5/5_31.html
https://parsinger.ru/html/headphones/5/5_32.html

2. Блок кода №2.

- Здесь все очень знакомо и просто, вы видели его в предыдущем разделе, посвященном
aiohttp, и по предыдущему примеру кода все должно быть понятно. Вы уже неоднократно 
работали с BeautifulSoup, тут вопросов быть не должно.

3. Блок кода №3.

- А вот тут начинается самой интересное. task = [main(link) for link in urls], т.к.
результатов выполнения асинхронной функции является корутина, в переменную task попадают
объекты корутины. Чтобы в этом убедиться, измените этот блок кода таким образом,
каждый объект списка task будет иметь класс корутины <class 'coroutine'>. Другими
словами, все, что происходит в асинхронной функции main(), переобразуется в специальный
объект, который может работать внутри event loop. Вы же помните, что цикл событий
умеет работать тольлко с корутинами, именно по этой причине нам необходимо передавать
в него тольео корутины.

if _name_=='_main_':
  task=[main(link) for link in urls]
  for x in task:
    print(type(x))

  asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
  asyncio.run(asyncio.wait(task))

Результат:
  <class 'coroutine'>
  <class 'coroutine'>
  ...
  <class 'coroutine'>
  <class 'coroutine'>
- Функция asyncio.wait(), о которой мы говорили в предыдущих разделах, одновременно 
запускает awaitable-объекты из указанного нами списка и блокирует программу до ее завершения.

4. Результат:
  - Если вы запускали код у себя в терминале, то обратили внмиание на то, что ссылки в консоль 
печатаются в случайном порядке. Случайный порядок возвращаемых результатов обусловлен спецификой
работы цикла событий. Как только ответ с данными от сервера получен, он тут же возвращается
и его результат печатается.
