4.10 Parsing JSON

Парсим JSON

Очень часто сервера отдают нужную нам информацию в JSON-формате, и наша задача - найти именно тот сетевой запрос, в котором есть JSON, и распарсить его.

Для начала нужно понять, как находить те самые запросы, в которых есть ответ в JSON. Посмотрим на российский маркетплейс wildberries.

Откройте https://www.wildberries.ru/ найдите этот запрос и скопируйте содержимое полч JSON на сайт https://jsonviewer.stack.hu/ для удобного отображения.
Мы увидим хорошо структурированную информацию. С такой информацией работать намного проще.

Давайте ближе посмотрим на ссылку, которую мы нашли на первом скриншоте. В ней мы видим параметр page=2, это как раз тот параметр, который нам понадобится
для прохода по всем страницам. На каждой итерации цикла мы будем получать JSON с карточками товаров. Можете убедиться в этом сами, изменяя вручную параметр
в page = 2. Вот ссылка https://www.wildberries.ru/catalog/elektronika/planshety?sort=popular&page=2, на момент создания этого степа там девять страниц.

Парсим JSON часть 2

Для следующего примера нам понадобиться jsonplaceholder - https://jsonplaceholder.typicode.com/posts,
тот сервис предоставляет JSON для разработчиков. У него есть 6 ресурсов -
/posts - https://jsonplaceholder.typicode.com/posts
/comments - 
/albums - 
/photos -
/todos -
/users - 

Давайте сделаем запрос на /posts и посмотрим на данные через jsonviewer. Мы увидим 100 постов, где мы
можем извлечь четыре поля: "userId", "id", "title", "body". Если мы хотим получить какой-либо
определенный элемент, мы должны указать его в квадратных скобках - ["title"].

Для того, чтобы получить все 'userId' and 'title', мы пройдемся по всем элементам в цикле for:

import requests

url = 'https://jsonplaceholder.typicode.com/posts'

response = requests.get(url=url).json()
for item in response:
  print(utem["userId"], item["title"])

>>>1 sunt aut facere repellat provident occaecati excepturi optio reprehenderit
    1 qui est esse
    1 ea molestias quasi exercitationem repellat qui ipsa sit au
    ...
    10 at nam consequtur ea labore ea harum
  
В результате мы получили все "userId" and "title". Обратите внимание на применяемый к response метод
.json(), мы говорили об этом в разделе, посвященном requests. Этот метод помогает сериализовать данные с
сервера в JSON-объект, при условии, что сервер готов нам их отдать.

Вложенность JSON
Для следующего примера нам понадобится результат выполнения одной из прошлых задач. Для удобства вы
можете найти его по ссылке - https://parsinger.ru/downloads/get_json/res.json.

Наша цель - извлечь из значения ключа "description" вложенные ключи "brand" and "model". Для этого
первым ключом указывается родительский элемент, а после дочерний ["description"]["brand"]

import requests

url = "http://parsinger.ru/downloads/get_json/res.json"

response = requests.get(url=url).json()
for item in response
  print(item["description"]["brand"], item["description"]["model"])

>>> Jet Excidium
    Huawei Band 6 FRA-B19
    Huawei Band 6 FRA-B191
    Huawei GT 3 MIL-B19V
    ...
    HP Pavilion Gaming 600

Задание 1

Используйте полученный по ссылке https://parsinger.ru/downloads/get_json/res.json - JSON чтоб 
посчитать количество товара в каждой категории.

На вход ожидается словарь. {"watch":N,"mobile":N, "mouse":N, "hdd": N, "headphones": N} где
N это общее количество товаров.

Количество вы найдёте в каждой карточке товара


Решение

import requests

# Загружаем JSON с сайта
url = "https://parsinger.ru/downloads/get_json/res.json"
response = requests.get(url)
data = response.json()

# Создаем словарь для хранения количества товаров по категориям
category_counts = {
    "watch": 0,
    "mobile": 0,
    "mouse": 0,
    "hdd": 0,
    "headphones": 0
}

# Проходим по каждому товару и добавляем количество в соответствующую категорию
for item in data:
    category = item["category"]
    quantity = item["count"]
    category_counts[category] += quantity

# Выводим результат
print(category_counts)


Задание 2
Используйте полученный по ссылке - https://parsinger.ru/downloads/get_json/res.json - JSON чтоб
посчитать стоимость товаров в каждой отдельной категории. 

На вход ожидается словарь. {'watch':N, 'mobile':N, 'hdd': N, 'headphones': N} где N это общая
стоимость товаров в категории.
