3.3 The requests.get() Method

requests.get()

Запросы к серверу можно направлять с самыми разными целями. Но мы будем делать акцент в основном на .get() запросы.
Запросы .get() обычно предназначены только для чтения данных без их изменения. С помощью этого метода мы научимся получать HTML-код страницы, скачивать изображения,
музыку и видео.

Чтобы выполнить .get() запрос, используется команда requests.get()

Это такой же тип запроса, какой направляет на сервер ваш браузер, чтобы открыть вам интернет-страницу. Единственное отличие заключается в том, что библиотека Requests
не может выполнить рендеринг кода HTML, поэтому вы получите просто текст кода HTML. Но пролверьте, там есть все, что нам нужно.

Сайт https://httpbin.org/ создан специально для веб-разработчиков, чтобы они могли тестировать свой код, отправляя свои запросы. Этот сайт возвращает информацию по конкретному 
запросу. Его мы будем использовать весь блок изучения библиотеки requests.

import requests

response = requests.get(url='http://httpbin.org/')

print(type(response))

>>><class 'requests.models.Response'>

Давайте вместе выполним это запрос и посмотрим type() возвращаемого объекта. Как видим, мы получаем объект класса Response, который является экземпляром класса requests.

Надеюсь, от последней фразы вы не запутались. Попробую объяснить проще. В последнем примере переменная response стала экземпляром класса requests и в нее передали
атрибут = url

Мы можем передавать этому классу и другие атрибуты, поднобнее о которых вы узнаете далее.

url - передает ссылку - цель, куда будет отправлен запрос. (Обязатлеьный)
params - словарь или байты, которые будут отправлены в строке запроса. (Необязательный)
headers - словарь HTTP-заголовков, отправляемых с запросом. (Необязательный)
cookies - объект Dict or CookieJar для отправки с запросом. (Необязательный)
auth - AuthObject для включения базовой аутентификации HTTP. (Необязательный)
timeout - Число с плавающей запятой, описывающее тайм-аут запроса. (Необязательный)
allow-redirects - логическое значение. Установите значение True, если разрешено перенаправление. (Необязательный)
proxies - Протокол соспоставления словаря с URL-адресом прокси. (Необязательный)
stream  - Удерживает соединение открытым, пока не получен весь Response.content (Необязательный)

Заголовки headers = 

Заголовки отправляются вместе с запросом и возврщаются с ответом. Они нужны, чтобы клиент и сервер понимали, как интерпритировать данные, отправляемые и
получаемые в запросе и ответе.

При написании парсеров рекомендуется отправлять свои заголовки вместе с .get() запросом, потому что сервер понимает, что делать с нашим запросом, именно исходя из тех
заголовков, которые мы отправили. Иногда необходимо маскироваться под браузер, подменять cookie, user-agent, headers, ip и др.

Вот пример отправляемого нашим скриптом заголовка.

import requests

response = resuets.get(url='http://httpbin.org/user-agent')
print(response.text)

>>>{"user-agent": "python-requests/2.27.1"}

Если сайт простой и программистов не заботят такие мелочи, то мы тоже не переживать и отправлять такие запросы. Но чаще всего это не так.

user-agent:Mozilla
