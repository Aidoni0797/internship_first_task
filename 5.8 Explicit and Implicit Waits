5.8 Explicit and Implicit Waits

Явное и неявное ожидание, Selenium Waits (Implicit Waits)

Ни один современный сайт не обходится без JavaScript. Когда вы серфите по интернету, вы часто встречаете
плавно появляющиеся элементы на странице, элементы, которые появляются при скроллинге или при полной
загрузке страницы, вариаций использования JS очень много. К этому уроку у вас уже есть определенный
опыт написания скриптов на Selenium. Я уверен, вы сталкивались с тем, что элемент который вы ищете, еще не 
загрузился или еще не доступен для взаимоодействия с ним.

Перечисленные ситуации будут всегда возникать при написании скриптов, так устроены современные сайты,
без этого никуда. Ранее в курсе мы обходились простыми time.sleep(), это хорошее начало для того, чтобы
понимать как работать с ожиданиями. Представьте ситуацию, что ваш скрипт работает с множеством
элементов, на разных страницах сайта или даже на разных сайтах, и вдруг нужный элемент не загрухился
вовремя и скрипт упал. Уверен, вы сразу напишите в этом месте time.sleep() или даже несколько, чтобы
обезопасить работу. И вот ваш скрипт весь обвешан "слипами" и большую часть времени ваш код спит.

Для таких ситуаций существуют неявные ожидания Implicit Waits. Неявное ожидание называется так, 
потому что его не нужно указывать отдельно как time.sleep().

Откройте сайт, дождитесь активации кнопки и совершите клик по ней. Вы получите сообщение о успешном
клике. Написать код с помощью time.sleep() для такой кнопки очень сложно, потому что на становится
активной спустя от 1 до 3 секунд после загрузки страницы, а потом снова выключается. Ради интереса
можете попробовать написать стабильный код, используя time.sleep(). А если таких кнопок будет не одна,
а десять, и все с разными таймингом?

from selenium import webdriver
fro, selenium.webdriver.commpn.by import By

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/expectations/1/index.html')
  browser.find_element(By.ID, 'btn').click()
