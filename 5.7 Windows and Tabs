5.7 Windows and Tabs

Модальные окна

Модальное окно - это окно, которое блокирует работу пользователя до тех пор, пока это окно не закроют. В этом
степе мы поговорим только про те окна, которые использует браузер. О тех, которые формируются при помощи 
JavaScript создателями сайта, мы говорить не будем, но этими окнами можно управлять другими средствами
Selenium, о которых мы говорили в других уроках.

На сайте (https://parsinger.ru/blank/modal/1/index.html) можно посмотреть, как работают простые модальные
окна, вшитые в браузер.

Основные функции применяемые к модальным окнам.

- .swith_to - переключает фокус на модальное окно;
- .accept() - нажимает на кнопку "ОК" в модальном окне;
- .dismiss() - нажимает на кнопку "Отмена" в модальном окне;
- .send_keys() - отправляет текст в текстовое поле в модальном окне;
- .text - возвращает title модального окна.

Переключение на все виды модальных окон выполняется командой browser.switch_to.alert

Виды модальныз окон.

1. Alert - выводит пользователю сообщение, содержит кнопку "ОК";
2. Prompt - запрашивает у пользователя ввод каких-либо текстовых данных, содержит кнопки "ОК" и "Отмена";
3. Confirm - выводит окно с вопросом содержит кнопки "ОК" и "Отмена".

Модальное окно Alert

Код ниже, выполнит клик на кнопку с id = "alert", вызывав тем самым модальное окно alert, переключит
на него свой фокус функцией browser.switch_to.alert и в принте распечатает содержимое title этого окна.

import time
from selenium import webdriver
from selenium.webdriver.commpn.by import By

with sebdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/blank/modal/1/index.html')
  browser.find_element(By.ID, 'alert').click()
  time.sleep(1)
  alert = browser.switch_to.alert #Если планируете что-то делать с этим событием, можно добавить его
в переменную
  print(alert.text)
  time.sleep(1)
  alert.accept()

>>> Это модальное окно alert

Модальное окно Prompt

В модальное окно prompt мы можем отправлять текст при помощи функции .send_key("")

import time
from selenium import webdriver
from selenium.webdriver.common.by import By

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/blank/modal/1/index.html')
  browser.find_element(By.ID, 'prompt').click()
  time.sleep(2)
  prompt = browser.switch_to.alert
  prompt.send_keys('Введённый текст')
  prompt.accept()
  time.sleep(5)
  print(browser.find_element(By.ID, 'result').text)

>>> Введённый текст

Код выше, нажимает на кнопку с id="promt" тем самым вызвав окно prompt, после этого отправляет
текст в текстовое поле окна и нажимает кнопку "ОК" при помощи функции .accept(). Когда "ОК" был нажат
на странице  в id = "result" появляется пользователем текст, который печатается в самом конце
выполнения кода.

При работе в Chrome с окном prompt, введённый текст, в самом окне не отображается, хотя код выше
возвращает нам текст который ввёл пользователь. Это доказывает то, что .send_keys() работает, но не так
как следует, вина это Selenium или Chrome не понятно. К примеру в Firefox или Opera такой проблемы не наблюдается.

Модальное окно Confirm

Модальное окно confirm имеет всего 2 кнопки, "Ок" и "Отмена", взаимодействовать с которыми мы можем
функциями .accept() и .dismiss()

import time
from selenium import webdriver
from selenium.webdriver.common.by import By

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/blank/modal/1/index.html')
  browser.find_element(By.ID, 'confirm').click()
  time.sleep(2)
  prompt = browser.switch_to.alert
  prompt .accept() #Замените на .dismiss() чтобы нажать на кнопку "Отмена"
  time.sleep(.5)

Размеры окна браузера
.set_window_size()

В различных ситуациях нам необходимо указывать собственный размер окна браузера. Например, когда вы запускаете
скрипт на компе с маленьким монитором, или наоборот на огромной мониторе, или собираетесь открыть
одновременно большое количество окон браузера. Сценариев применения методов изменения размеров окна браузера
достаточно.

Задать размер окна браузера можно методом .set_window_size(X, Y)

- где Х Это ширина окна;
- где У это высота окна.

Важно знать, что минимальный размер окна браузера может быть: ширина - 516 рх, высота - 134 зч. Включая все
элементы управления  браузера, а не только рабочей области сайта.

import time
from selenium import webdriver

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/window_size/1/')
  browser.set_window_size(1200, 720)
  time.sleep(5)

Код выше, откроет окно браузера размером х:1200 рх, у: 720 рх.

Рабочая область сайта в данном случае будет равна х:1184 рх, у:587 рх, не путайте с общим размером окна
браузера (данные получены с учетом 100% масштабирования экрана в windows 10, разрешения экрана Full HD
1920*1080*, а так же версия Chrome 103) у вас эти числа могут отличаться.

- 16 рх занимают боковые границы браузера левая и правая;
- 133 рх занимает верхняя панель управления браузера и нижняя граница.

Учитывайте эту особенность при написании кода для будущих парсеров и решения задач.

.get_window_size()

Для получения размеров окна браузщера используется метод .get_window_size(), у него есть метод 
.get(), который принимает 2 параметра "height" and "width" соответственно, они возвращают высоту
и ширину окна браузера.

from selenium import webdriver

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/window_size/1/')
  browser.set_window_size(1200, 720)
  print(browser.get_window_size().get('height'))
  print(browser.get_window_size().get('width'))


При вызове метода .get_window_size() в ответ мы получим словарь, который содержит ширину и высоту окна
браузера.

from selenium import webdriver

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/window_size/1/')
  browser.set_window_size(1200, 720)
  print(browser.get_window_size())

Как и при работе с любым словарем, мы можем получить доступ к ширине или высоте по ключу ["width"]
and ["height"]

from selenium import webdriver

with webdriver.Chrome() as browser:
  browser.get('http://parsinger.ru/window_size/1')
  browser.set_window_size(1200, 720)
  print(browser.get_window_size()["width"])
  print(browser.get_window_size()["height"])


Вкладки в браузере

При работе в браузере, мы можем открывать новые вкладки и работать в них. Мы можем открыть любое
количество вкладок одновременно, но работать мы можем только в активной. Мы можем переключаться
между вкладками, получиь их title, проходить по вкладкам в цикле, получить их дескрипторы, практически
все то, что вы делаете вручную.

Вам может понадобится собрать данные со второй вкладки, не отвлекаясь на первую. Или сайт, который вы
парсите, открывает ссылки в новой вкладке, такое происходит если у ссылок есть атрибут target="_blank".

Дескриптор - это идентификатор вкладки браузера, в Opera and Chrome дескрипторы выглядят одинаково,
CDwindow-8696D8A3F222B281BB03FC1EC259B251, а в Firefox они выглядят немного иначе, d8e0e954-bf72-
4eae-a63e-5ea404c3b0eb. Дескрипторы - это те сущности, которые  помогают нам манипулировать вкладками.

- .current_window_handle - возвращает дескриптор текущей вкладки;
- .window_hndles - возвращает список всех дескрипторов открытых вкладок;
- .switch_to.window(window_handles[0]) - переключает фокус между вкладками.

Запустите код ниже, чтобы посмотреть, как он работает. Этот код открывает первую вкладку методом
.get("URL"), далее, открывает ещё три вкладки методом .execute_script(), и в после этого печатает все
дескрипторы открытых вкладок.

import time
from selenium import webdriver

with webdriver.Chrome() as browser:
  result = []
  browser.get('http://parsinger.ru/blank/2/1.html')
  time.sleep(1)
  browser.execute_script('window.open("http://parsinger.ru/blank/2/2.html", "_blank1");')
  browser.execute_script('window.open("http://parsinger.ru/blank/2/3.html", "_blank2");')
  browser.execute_script('window.open("http://parsinger.ru/blank/2/4.html", "_blank3");')
  time.sleep(2)
  print(browser.window_handles)
