7.4 Parsing Group Members’ Data

Данные пользователя

Когда мы хотим спарсить данные из гурппы телеграмм, мы хотим получить либо информацию о ее подписчиках, 
либо общую переписку. В этом разделе мы научимся собирать данные о пользователях в группе.

Давайте вместе выполним ззапрос и получим данные "О себе", они ни чем не отличаются от данных, полученных о
другом пользователе, из исключением содержимого. Если вы все сделали как написано в модуле Установка,
настройка и импорты, после выполнение кода  ниже у вас появится кортеж с данными, давайте разберемся,
что мы получили.

Выполнение код у себя в терминале

from telethon import TelegramClient, events, sync, connection

r_api = 1*****8 #данные скрыты в целях безопасности
r_hash = 'b******4****0b0****9****8**b' #данные скрыты в целях безопасности

client = TelegramClient('session_name2', r_api, r_hash)
client.start()
print(client.get_me())

User(
  id = 332703068 - id пользователя;
  is_self = True - возвращает True, если запрос был отправлен "О себе", возвращает False в противоположном случае;
  contact = True - возвращает True, если пользователь есть в вашем списке контактов, возвращает False 
в противоположном случае;
  matual_contact - True - возвращает True, если пользователи взаимно подписаны друг на друге 
(есть у друг друга в контактах), возвращает False в  противоположном случае;
  deleted = False - возвращает True, если аккаунт пользователя был удален, False, если аккаунт активен;
  bot = False - возвращает True, если аккаунт является ботом, возвращает False в противоположном случае;
  bot_chat_history = False - возвращает True, если данный бот умеет читать сообщения в группе, возвращает
False в противоположном случае;
  bot_nochats=False - возвращает True, если бота можно добавить в группу, возврщает False в противоположном случае;
  verified=False - возвращает True, если пользователь верифицирован при помощи смс, возвращает False
в противоположном случае;
  retricted=False - возвращает True, если пользователь находится в вашем чёрном списке, возвращает False
в противоположно случае;
  min =  False;
  bot_inline_geo = False - возвращает True, если бот может запращивать вашу геолокацию.
  support = False - возвращает True, если пользователь является официальным пользователем поддержки,
возвращает False в противоположном случае;
  scam = False - возвращает True,  если на пользователя было отправлено множество жалоб о мошенничестве
(нигде нет инфы о том, сколько конкретно должно быть жалоб), возвращает False в противоположном случае;
  apply_min_photo = False - возвращает True, если у пользователя установлено фото профиля, возвращает
False в противоположном случае;
  fake = False - возвращает True, если множество пользователей пожаловались о том, что аккаунт фейковый
(не известно отличие от scam=False), возвращает False в противоположном случае;
  access_hash = -5**4**6**7**5**5**3 - возвращает хэш доступа пользователя;
  first_name='Павел' - возвращает first_name пользователя;
  last_name='Хошев' - возвращает last_name пользователя;
  username = 'Pashikk' - возвращает username пользователя;
  phone = '7**8***7**5' - возвращает phone пользователя, если он не скрыт в настройках конфиденциальности;
  photo=UserProfilePhoto(вложенный кортеж с фото пользователя, если оно есть;
    photo_id = 1428948796795103153 - id фото пользователя;
    dc_id = 2 - идентификатор DC, где хранится фото пользователя;
    hash_video=False - возвращает True, если у пользователя анимировання аватарка, возвращает False 
в противоположенном случае;
    stripped_thumb = b'\x01\x08\x08I\xb5\x12\xe4\xed\x90\x8c\xf1\x81\xe9E\x14Qa
') - обрезенная миниатюра, хранится в байтовом виде и может быть скачана;
  status=UseStatusOffLine(was_online=datetime.datetime(2022,6,11,11,57,8,tzinfo=datetime.timezone.utc))-
онлайн-статус пользователя (когда был онлайн последний раз);
  bot_info_version = None - если пользователь бот, будет отображена его версия;
  restriction_reason = [] - содержится причина, по которой пользователь был ограничен для вас;
  bot_inline_placeholder=None - строка текста для бота по умолчанию;
  lang_code = None) - код языка пользователя.


Парсим участников группы

Для работы с этим модулем, была создана отдельная группа в Telegram, просьба не подписываться, а только
взаимодействовать с ней в рамках курса. Некоторые задачи завязаны на сообщенияя в группе и на
пользователей в ней. Для того, чтобы не сломать задачи себе и другим учащимся не подписывайтесь на нее.
Telethon позволяет собирать информацию с групп, даже если вы не подписаны на них.

Первый основной метод для получения участников группы - .get_participants("url_telegram_chat").Метод
принимает аргумент - ссылку на группу в telegram, у которой необходимо получить её участников.

Выполните код у себя в терминале чтобы получить всех участников нашей учебной группы:

from telethon import TelegramClient, events, sync, connection

r_api = 1*****8 #данные скрыты в целях безопасности
r_hash = 'b******4****0b0****9****8**b' #данные скрыты в целях безопасности

client =  TelegramClient('session_name2', r_api, r_hash)
client.start()

prticipants = client.get_participants('t.me/Parsinger_Telethon_Test')

>>> [User(id=332703068, is_self=True, contact=True, mutual_contact=True, deleted=False, bot=False,
bot_chat_history=false,bot_nochats=False,verified=False,retricted=false,min=False,bot_inline_geo=False,
support=False, scam=False, apply_min_photo=False, fake=False, access_hash=-5964566557575375003,
first_name='Павел',last_name='Хошев', username='Pashikk', phone='79384757505', photo=UserProfilePhoto(
photo_id=142894796795103153, dc_id=2, has_video=False, status=UserStatusOffline(was_online=datetime.
datetime(2022,6,11,12,57,19,tzinfo=datetime.timezone.utc)),
........

Ссылку на гурппу можно указать тремя способами. Важно: данные можно получить только с той группы, где
открыт список пользователей.

1. https://t.me/Parsinger_Telethon_Test - при указании группы подобным образом, подписка на группу
не обязательна;
2. t.me/Parsinger_Telethon_Test - при указании группы подобным образом, подписка на группу не обязательна;
3. Parsinger_Telethon_Test - при указании группы подобным образом учётная запись, с которой вы работаете,
должна быть подписана на эту группу.

В ответ мы получаем данные по каждому пользователю. Видим что все поля нам знакомы, мы оних говорили 
в прошлом степе. Чтобы получить доступ к конкретному полю, мы можем пройтись по возвращенному объекту
в цикле и получить доступ к его полям, например к first_name and last_name.

from telethon import TelegramClient, events, sync, connection

r_api = 1*****8 #данные скрыты в целях безопасности
r_hash = 'b******4****0b0****9****8**b' #данные скрыты в целях безопасности

client = TelegramClient('session_name2', r_api, r_hash)
client.start()

participants = client.get_participants('t.me/Parsinger_Telethon_Test')

for item in participants:
  print(item.first_name, item.last_name)

>>> Павел Хошев
Daxton Perry
Anthony Alexander
William Price
Roger Parks
...
Jordan Jones
Barbara Long
Edith Shaw
Patricia Baker

В ответ мы получаем те поля, которые мы запросили у экземпляра класса client.

Парсим фото профиля участника группы

Чтобы спарситьь фото профиля участника группы, в библиотеке Telethon имеется специальный метод
.download_profile_photo('user', 'name_photo'), который принимает два обязательных параметра:
"user" - параметр, указывающий на конкретного пользователя, у которого мы хотим скачать фото,
'name_photo' - имя сохраняемого файла, расширение указывать не обязательно, т.к. файл по умолчанию
сохраняется в формате .jpg. Укажите другое расширение если необходимо, и файл будет сохранен
именно в нем.

В коде ниже мы воспользовались менеджером контекста with/as для удобства, подобная кунструкция
должны быть вам знакома, ее мы активно использовали в модуле Selenium.

Запустите код ниже, чтобы скачать фото определенного пользователя. Имя пользователя можно указать с
@ или без нее.

@Pashikk == Pashikk

from telethon import TelegramClient, events, sync, connection

r_api = 1********8
r_hash = 'b******************b'

with TelegramClien('my', r_api, r_hash) as client:
  client.download_profile_photo('Pashikk', 'photo.png')

Чтобы скачать фото сразу всех участников группы, необходимо сперва получиьт всех, кто состоит в группе,
затем в цикле получать доступ к профилю и применять метод .download_profile_photo('user', 'name_photo')

from telethon import TelegramClient, events, sync, connection

r_api = 1********8
r_hash = 'b****************************b'

with TelegramClient('my', r_api, r_hash) as client:
  participants = client.get_participants('t.me/Parsinger_Telethon_Test')
  for i, user in enumerate(participants):
    client.download_profile_photo(user,f'{i}') #f'img/{i}' используйте для указания пути сохранения файлов

В коде выше мы применили уже знакомый вам метод client.get_participants('t.me/Parsinger_Telethon_Test'),
который возвращает список всех пользователе. Пс\осле этого в цикле применяем метод 
.download_profile_photo('user', 'name_photo') чтобы, скачать поочерёдно фото с каждого профиля. Так
же применили встроенную функцию enumerate() для именования скачанных файлов.

По умолчанию метод .download_profile_photo() имеет параметр download_big= положение которого влияет
на то, какое фото будет скачано, большое или маленькое download_big=True - скачает
полноразмерное фото, а download_big = False скачает миниатюру фото профиля.

- client.download_profile_photo(user, f'img/{i}', download_big=True) - скачать полноразмерное фото
профиля;

- client.download_profile_photo(user, f'img/{i}', download_big=False) - скачать миниатюру фото профиля


Парсим фото профиля участника группы часть 2

Когда у пользователя больше чем одно фото в профиле и нам нужны они все, а метод .download_profile_photo()
возвращает только первое найденное фото, мы применяем метод .iter_profile_photos().

Метод .iter_profile_photos('@username', limit=3) получает один обязательный параметр, это имя 
пользователя, у которого нужно получить все фото, и второй необязательный параметр limit=,
который ограничивает количество скачиваемых фотографий необходимо пропустить прежде чем скачать первое
фото профиля. .iter_profile_photos('@username', offset=2) - пропустит первые дву фото и начнет качать сразу 
с третьей.

Пример кода ниже, он скачат все фото из профиля @William_Price34 и сохранит их в папке с проектом.

from telethon import Telegramclient, events, sync, connection

r_api = 1*************8
r_hash='b****************************b'

with TelegramClient('my', r_api, r_hash) as client:
  for x in client.iter_profile_photos('@William_Pice34'):
    client.download_media(x)

Давайте теперь неного усложним нашу задачу и скачаем все фотки из профиля. Мы будем качать 
абсолютно все фотки с профиля, у кого-то может быть одна аватарка, а у кого то их десять. 
Telegram сохраняет все ваши прошлые аватарки, надеюсь, вы знакомы с этой его особенностью.

Сразу хочу предупредить, что следующий код для новичка может быть сложным в понимании, я постараюсь
объяснить максимально просто.
Так же мы используем в этом коде метод  .download_media(), который принимает один обязательный
аргумент, это объект для скачивания. Второй не обязательный аргумент file='img/', в этом аргументе мы
можем передать путь к папке, куда мы хотим сохранять наши файлы, так же можем указать расширение для
сохраняемого файла. .download_media(object, file='img/').

from telethon import TelegramClient, events, sync, connection

r_api = 1********8
r_hash = 'b4***********************b'

with TelegramClient('my', r_api, r_hash) as client:
  all_user_group = client.get_participants('t.me/Parsinger_Telethon_Test')
  for user in all_user_group:
    for iter_photo in client.iter_profile_photos(user):
      client.download_media(iter_photo, file='img/')

Давайте разбираться, что же тут написано.

1. В переменную all_user_group записали список из участников нашей учебной группы Parsinger_Telethon_Test;
2. В цикле for/in итерируемся по списку участников группы;
3. Во вложенном цикле for/in мы итерируемся по всем фото указанного пользователя в методе
.iter_profile_photos(user), где user - это итератор внешнего цикла;
4. На каждой итерации вложенного цикла мы передаём каждую найденную фотографию в метод
.donwload_media(), который загружает переданную ему объект, в нашем случае фотографию.

Парсим описания профиля участника группы

Блок Описание, или Description или "О себе" имеется у каждого профиля, и я не нашел опции спрятать этот
блок, чаще там просто отсутствует информация. Если вам пока не понятно, это тот блок, что в рамке на
скриншоте ниже. Вт именно его мы и будем учится парсить в следующих степах.

В прошлых уроках для получения информации о пользователе мы использовали метод .get_participants(),
который возвращает TotalList со всеми участниками группы. У этого метода есть один серьезный недостаток
он не работает в группах с числом участников больше 4000. Поэтому нам необходим другой метод, а именно
.iter_participants(channel), который принимает в аргументы ссылку на группу.

Метод .iter_participants(channel) итерирует по участникам группы, сразу отдавая результат, поэтому это
то, что нам нужно. Текже следует отметить, что метод .get_me(), который возвращает информацию о
пользователе, не имеет поля about, в котором хранится инфмаорция "О себе". Чтобы получить доступ к этому
полю, нам потребуетс импортировать еще один модуль, который работает с пользовательским профилем и
имеет больше полей для работы с ними.

Импортируем:

from telethon.tl.functions.users import GetFullUserRequest

Синтаксис использования: client(GetFullUserRequest(user)), где user - это ссылка на профиль пользователя.

Код ниже выполняет итерацию по всем участникам группы Parsinger_Telethon_Test и собирает информацию
хранящуюся в поле "О себе", с помощью атрибута about класса TelegramClient.

from telethon import TelegramClient, events, sync, connection
from telethon.tl.functions.users import GetFullUserRequest

r_api = 1********8 #данные скрыты в целях безопасности
r_hash = 'b*********4********0b0******9**8**b' #данные скрыты в целях безопасности

with TelegramClient('my', r_api, r_hash) as client:
  users = client.iter_participants('Parsinger_Telethon_Test')
  for user in users:
    user_full_about = client(GetFullUserRequest(user))
    print(user_full_about.about)

Давайте посмотрим на все поля атрибутов возвращаемого объекта у класса GetFullUserRequests(). Обратите
внимание, что возвращаемый объект похож на объект из первого степа, только там он назывался User(), 
а тут название UserFull(), это нам красноречиво намекает на то, что UserFull() обладает расширенным
количеством полей. Чтоб не повторяться, я выделил лишь те, которые отличаются от объекта User(). Для
парсинга нам почти всегда нужно всего одно поле, about, с остальными вы можете познакомится самостоятельно.

UserFull(
  user=User(
    id = 2**************2,
    is_self=True,
    contact=True,
    mutual_contact=True,
    deleted=False,
    bot=False,  
    bot_chat_history=False,
    bot_nochats=False,
    verified=False,
    retricted=False,
    min=False,
    bot_inline_geo=False,
    support=False,
    scam=False,
    apply_min_photo=True,
    fake=False,
    access_hash=32****************2,
    first_name='Павел',
    last_name = 'Хошев',
    username = 'Pushikk',
    phone=+7***5**5*0*.
  )

)
