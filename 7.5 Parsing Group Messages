7.5 Parsing Group Messages

Парсим сообщения группы

Для парсинга сообщений из группы или паблика Telegram используется два основных метода библиотеки
Telethon. Первый метод - это .get_messages(), который возвращает указанное количество сообщений чата.
Второй метод - это - .iter_messages(), который совершает итерации по каждому сообщению отдельно. У каждого 
из этих методов есть свои плюсы и минусы. Рассмотрим эти два метода более подробно.

Метод .client.get_messages() - возвращает TotalList(<class 'telthon.helpers.TotalList'>), это список с
дополнительными total свойством, который очень сильно похож на именрванный кортеж, взаимодействие с ним
происходит по тому же принципу, что и с TotalList.

Метод client.iter_messages() - итерируется по каждому сообщению чата отдельно, удобен, если мы хотим
обрабатывать сообщения на лету.

Выполним код ниже и посмотрим на возвращаемый методом .get_messages() объект, и разберем его подробнее.

from telethon import TelegramClient, events, sync, connection

r_api=1**********8
r_hash='b******************************b'

with TelegramClient('my', r_api, r_hash) as client:
  all_message = client.get_messages('https://t.me/Parsinger_Telethon_Test')
  for message in all_message:
    print(message)

>>>Message(id=200, peer_id=PeerChannel(channel_id=1795821154), date=datetime.datetime(2022,6,11,9,40,26,
tzinfo=datetime, timezone.utc), message='56405643545063445516345054346351', out=False, mentioned=False,
media_unread=False,silent=False,post=False,from_scheduled=False,legacy=False, edit_hide=False,
pinned=False, from_id=PeerUser(user_id=5125814085), fwd_from=None, via_bot_id=None, reply_to=None,
media=None, reply_marlup=None, entities=[], views=None, forwards=None, replies=MessageReplies(replies=0,
replies_pts=213, comments=False, recent_repliers=[], channel_id=None, max_id=None, read_max_id=None),
edit_date=None, post_author=None, grouped_id=None, retriction_reason=[], ttl_period=None)

Message(
  id = 200 - идентификатор этого сообщения;
  peer_id=
    PeerChannel(
      channel_id=1795821154), - ID пользователя, группы, канала, куда было отправлено сообщение;)
    date=
      datetime.datetime(2022,6,11,9,40,26,tzinfo=datetime.timezone.utc),-объект даты, указывает на то, когда
      сообщение было отправлено;
    message='Текст сообщения',-строковый объект сообщения;
    out=False,- возвращает True, если сообщение является исходящим, т.е., отправлено с вашей учетной записи;
    mentioned=False, - возвращает True, если медиа в сообщении были прочитаны;
    silent = False, - возвращает True, если сообщение должно уведомить участников звуковым сигналом;
    post=False, - возвращает True, если сообщение является постом в шировещательном канале;
    from_scheduled=False, - возвращает True, если сообщение было создано из заранее запларинованного
    сообщения;
    legacy=False, - возвращает True, если сообщение является устаревшим;
    edit_hide=False, - возвращает True, если метка о редактировании сообщения была скрыта;
    pinned=False, - возвращает True, если сообщение закреплеено в настоящее время;
    from_id=
      PeerUser(
        user_id=5125814085), - ID пользователя, групе или канала отправившего сообщение;
    fwd_from=None, - возвращает True, если сообщение является репостом из другого чата\группы\паблика;
    via_bot_id=None, - ID бота который отправлял это сообщение;
    reply_to=None, - ID сообщения если это сообщение отвечает на другое;
    media=None, - медиафайлы отправленные в сообщении если такие имеются(фото, видео, документы, GIF,
    стикеры и т.д.)
    reply_markup=None, - разметка для этого сообщения, которое отправлено ботом, чаще всего это кнопки;
    entities=[], - список элементов в этом сообщении, таких как жирный шрифт, курсив, код, гиперссылки и т.д.;
    views=None, - количество просмотров этого сообщения;
    forwards=None, - сколько раз это сообщение было переадресовано;
    replies = сколько раз другое сообщение ответило на это сообщение;

      MessageReplies (
        replies=0,
        replies_pts=213,
        comments=False,
        recent_repliers=[],  
        channel_id=None,
        max_id=None,
        read_max_id=None),
  edit_date=None, - дата последнего редактирования сообщения;
  post_author=None, - отображаемое имя отправителя сообщения;
  grouped_id=None, - проверяет, принадлежит ли это сообщение к группу сообщений, фото- или видео альбому;
  retriction_reason=[], - список причин, по которым это сообщение было ограничено;
  ttl_period=None - период жизни, настроенный для этого сообщения;)

Запоминать все поля возвращаемого объекта не нужно, для парсинга нам чаще всего необходимы следующие поля 
с информацией:

user_id - чтобы извлечь ID пользователя, отправившего сообщение, необходимо к объекту сообщения
применить способ
  message.from_id.user_id;
date - для того, чтобы извлечь дату отпраки сообщения, используется способ message.date;
message - чтобы извлечь текст сообщения, применяется два способа, message.text and message.message;
media - используется для определения, присутствуют ли медиафайлы в сообщении или нет, как извлекать
медиафайлы из сообщения мы поговорим далее;
Доступ с остальным полям осуществляется подобным образом, с этим проблем у вас возникнуть не должно.

Обратите внимание на один важный момент. В объекте Message, хранится user_id в цифровом формате, а нам
чаще всего необходимо знать его username, если он у него имеется. Чтобы консертировать user_id в username
используется метод .get_entity(ID). Функция .get_entity(ID) возвращает объект User со всеми соответствующими
этому объекту полями.

Выполнение функции .get_entity(ID) вернет объект, у которого имеются все необходимые поля, нам осталось
извлечь из них username.

Код ниже, получает первое сообщение в чате, извлекает из него user_id(message.from_id.user_id) и передает
его в функцию .get_entity(ID) которая возвращает объект User, и уже у этого объекта мы извлекаем username.

from telethon import TelegramClient, events

r_api=1*****8
r_hasg='b************b'

with TelegramClient('my', r_api, r_hash) as client:
  all_message = client.get_messages('https://t.me/Parsinger_Telethon_Test')
  for message in all_message:
    id_user = message.from_id.user_id
    print(client.get_entity(id_user).username)

>>>daxton_13246

Функции .iter_messages() and .get_messages()

Как уже говорилось в прошлом степе, оба эти метода помогают извлекать сообщения из чатов, но делают они
это по-разному. В этом степе я бы хотел детальнее обсудить каждый из них, ведь с этими методами вы будете
работать часто.

.get_messages() and .iter_messages() принимают одинаковые аргументы:

client.get_messages(chat\group\dialog) - первый обязательный аргумент, ссылка на телеграмм
чат\паблик\диалог;
client.get_messages(limit) - количество сообщений, которые необходимо собрать из группы\паблика\диалога,
если limit не установлен, будет получено первое сообщение в чате;
client.get_massages(offset_date=datetime(2022,6,1)) -- принимает объект datatime находит все
сообщения ранее указанной даты, формат даты (год, месяц, день);
client.get_messages(offset_id(id_message)) - будут извлечены те сообщения, которые предшествуют 
сообщению с указанным id_message;
client.get_messages(max_id=30) - будут исключены те сообщения, которые имеют более высокий 
идентификатор;
client.get_messages(min_id=30) - будут исключены те сообщения, которые имеют более старым 
идентификатором;
client.get_messages(search='Искомый текст') - строка, которая будет использоваться в качестве
поискового запроса;
client.get_messages(from_user="@user") - будут возвращены сообщения только этого пользователя. Имя
можно указать как username, id_user, last_name, first_name;
client.get_message(reverse=True) - Если установлено значение True, сообщения будут возвращаться в 
обратном порядке (от самого старого к самому новому, а не от нового к самому старому). Это также
означает, что значения параметров offset_id and offset_date меняются местами;
client.get_messages(filter=InputMessagesFilterPhotos) - фильтр используется для возврата сообщения.
Например, данный фильтр вернет первое сообщение содержащее фото. Для работы с подобными фильтрами
необходимо их импортировать from telethon.tl.types import InputMessagesFilterPhotos.
Другие используемые фильтры (у каждого фильтра в списке, свой одноим(нный импорт, по аналогии с
InputMessagesFilterPhotos);

- filter=InputMessagesFilterChatPhotos - вернет первое сообщение, содержащее фото;
- filter=InputMessagesFilterContacts - вернет первое сообщение, содержащее контакт пользователя;
- filter=InputMessagesFilterDocument - вернет первое сообщение, содержащее документ (pdf, docx, txt and etc.)
- filter=InputMessageFilterEmpty - вернет первое сообщение, если его отправитель пуст, скорее всего 
это работает если пользователь был забанен в группе, а его сообщения не удалены;
- filter=InputMessageFilterGeo - вернет первое сообщение, в котром есть геометка;
- filter=InputMessagesFilterGif - вернет первое сообщение, в котором содержится GIF;
- filter=InputMessagesFilterMusic - вернет первое сообщение, если в нём содержится музыкальный файл;
- filter=InputMessagesFilterMyMentions - вернет первое сообщение, в котором есть упоминания учетной
записи, с которой происходит поиск;
- filter=
