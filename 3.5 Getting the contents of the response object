3.5 Getting the contents of the response object

Содержимое ответа response .json() .text .content

json()

Если вы уже знакомы с JSON, вам будет легче понять следующий пример. Если JSON вам не знаком, не переживайте: в следующих блоках мы остановимся на нем подробнее.

А пока сделаем простой запрос к сервису, который помогает сгенерировать фейковый JSON https://jsonplaceholder.typicode.com/todos/ - возвращает нам JSON-словарь.

import requests
response = requests.get(url='https://jsonplaceholder.typicode.com/todos/')
print(response.json())

>>>[{'userId': 1, 'id': 1, 'title': 'deletus aut autem', 'completed': False},]
....

import requests

response = requests.get(url='https://jsonplaceholder.typicode.com/todos/')
print(response.text)

>>>[
{
  "userId":1,
  "id": 1,
  "title": "delectus aut autem",
  "completed": false
},.....
]

Если вы скопируете и выполните эти два примера у себя в терминале, вы обнаружите, что .text и .json() вернут одну и ту же информацию.

Но на самом деле это не так. Если мы посмотрим на type() ответа каждого из запросов, мы обнаружим, что в случае с .json() мы получаем тип <class 'list'>,
а в случае с .text мы получаем тип <class 'str'>

.text

Так, а в чем разница и какой нам выбрать способ для парсинга?

1. Метод .json() мы используем в случае, когда мы знаем, отдает нам информацию в формате JSON. Как найти и получить ссылку, по которой мы могли бы получить данные
в этом формате, мы будем говорить в дальнейших уроках.

2. Атрибут .text мы будем использовать в тех случаях, когда будем парсить HTML при помощи BeautifulSoup (о котором также 
скоро поговорим).

Выполните следующий  код у себя в терминале и посмотрите на то, что вы получаете в ответ:

import requests

response = requests.get(url='http://httpbin.org/')
print(response.text)

.content

Атрибут .content нужен нам для загрузки медиа-файлов, картинок, всех форматов аудио и видео. Если мы выполним этот код без 
менеджера контекста with, мы увидим длинную байтовую строку.

import requests

response = requests.get(url='http://httpbin.org/image/jpeg')
print(response.content)

>>> b'\xff\xd8\xff\xe0\x00\x00\x10JFIF\x00\x01\x01\x02\x00\x1c\x00\x1c\x00\x00\xff\xfe\x005Edited by Paul
