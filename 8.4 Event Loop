8.4 Event Loop

Цикл событий  / event loop

Event loop - это так называемый цикл событий, в котором и происходит вся магия асинхронного кода, его еще можно
назвать диспетчером задач. Event loop создается командой asyncio.run(), высокоуровневойц асинхронной функцией.
Event loop также является ядром любого асинхронного приложения и имеет свой список задач, помимо этого делает еще
очень много всего "под капотом". В этом модуле мы не будет погружаться очень глубоко и изучать низкоуровневый код,
чтобы точно контролировать поведение наших парсеров. Для нашей цели это излишне, нам хватит простого понимания
как это устроено и как этим пользоваться.

Что же делает event loop? Он наблюдает за всеми задачами, которые мы в него передали, и если конкретная задача
дает сигнал о том, что ей нужно внимание,event loop вызывает код, который должен обработать это событие.

Пришло время разобраться в том, как работает цикл событий, на практике. Для начала нужно понять, что происзодит 
внутри цикла событий и чем это отличается от синхронного кода.

Если у вас не запускается код ниже, то удалите следующую строку

asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import asyncio
import aiohttp
from codetiming import Timer

#--------------------start block 1----------------------------
urls = ["http://google.com",
"http://yahoo.com",
"http://apple.com",
"http://microsoft.com",
"https://habr.com/",
"https://www.youtube.com/",
"https://stepik.org/",
"https://docs.python.org/",
"https://stackoverflow.com/",
"https://www.reg.ru/"]
#-----------------end block 1-------------------

#-----------------start block 2-----------------
async def main(url):
  with Timer(text=f"Затрачено вреени на запрос {{:.3f}} сек"):
    async with aiohttp.ClientSession() as session:
      async with session.get(url) as resp:
        print(resp.url)
#---------------------end block 2-----------------

#---------------start block 3--------------
if __name__ == '__main__':
  task = [main(link) for link in urls]
  asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
  asyncio.run(asyncio.wait(task))
#-------------------end block 3---------------

Как было обещано, будем разбирать код который вы уже видели, на этот раз у вас есть схема выполнения 
кода.

1. В первом блоке кода, мы подготовили список с сайтами которые мы хотим обработать. Это могут быть 
страницы одного сайта, заранее собранных вашей синхронной или асинхронной функцией.
2. Во втором блоке кода мы создаём корутину/сопрограмму main(), то что функция является корутиной нам 
говорит ключевое слово async. Результат выполнения функции корутины будет объект с классом corutines
3. asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) - самое непонятное 
происходит в этой строке, возникает справедливый вопрос, что же тут написано. Asyncio может предоставить
два цикла событий, о которых мы поговорим чуть ниже.
- set_event_loop_policy() - устанавливает политику указывающий вашей ОС каким циклом событий обрабатывать
ваши корутины, существует два типа политик, для windows и для *nix систем. Для написания парсеров нам
потребуется запомнить какой применять на вашей системе.
- WindowsSelectorEventLoopPolicy - использует наиболее эффективный селектор, который доступен в вашей ОС.
В 99% случаях вы будете использовать именно его.
- WindowsProactorEventLoopPolicy - использует порты завершения ввода/вывода IOCP. Скорее всего пригодится
при углублённом изучении асинхронного программирования.

Выше перечисленные селекторы event loop помогают решить ошибку при вызове цикла событий
RuntimeError('Event loop is closed')


Функции и методы event loop

При разработки парсеров вам не понадобится использовать дополнительные методы event loop, они предназначены
для разработчиков библиотек и фреймворков, для которых нужен более тонкий контроль над поведением
цикла. Но я считаю, что нужно иметь общее представление о его возможностях. Ниже перечислены основные
методы, которые могут быть полезны при дальнейшем изучении асинхронного программирования.

В курсе мы будем использовать определенные функции модуля asyncio, их мы будем обсуждать в разделе
"Основные методы и функции asyncio". При разработке парсеров мы будем использовать синтаксис
asyncio.run() без создания экземпляра класса.

asyncio. - вызов функции у asyncio означает, что мы вызываем ее непосредственно у цикла событий.
Одновременно может быть запущен только один цикл событий, по этой причине вызов функций asyncio
может быть выполнен из любого места в программе, все вызываемые функции и методы будут применяться
к текущему циклу событий.

1. asyncio.run(coroutine) - создает новый event loop и запускает переданную в него сопрограмму. После
исполнения сопрограммы закрывает цикл событий. В нашей программе может быть только один event loop
в одном потоке.

2. asyncio.get_running_llop() - возвращает текущий запущенный цикл событий, можно вызывать только из 
асинхронной функции, вызов вне сопрограммы вызовет ошибку. К переменной running_loop мы можем применять
те же самые методы и функции, что и к event loop, потому что это одна и та же сущность. Вы же помните,
что в одном потоке может быть только один цикл событий?

import asyncio

async def main():
  await asyncio.sleep(1)
  running_loop = asyncio.get_running_loop()
  print(runnug_loop)

asyncio.run(main())

Результат:
<ProactorEventLoop running=True closed=False debug=False>

3. asyncio.get_event_loop() - получить текущий цикл событий. Если в текущем потоке цикл событий не
установлен функцией set_event_loop(), то основной поток в вашей ОС и будет считаться основным.
Asyncio за нас создаст и установит цикл событий по умолчанию. Не рекомендуется использовать эту
функцию, т.к. ее поведение считается сложным в связи с использованием политик windows.
Предпочтительнее использовать get_running_loop()

4. asyncio.set_event_loop(event_loop) - устанавливает переданный в эту функцию цикл как по
умолчанию для этого потока.

5. asyncio.new.event_loop() - создает и возвращает новый объект цикла событий.

6. asyncio.stop() - останавливает цикл событий.

7. asyncio.is_running() - возвращает True, если цикл событий в настоящее время выполняется.

8. asyncio.is_closed() - возвращает True, если цикл событий был закрыт.

9. asyncio.close() - закрывает текущий цикл событий.

- Во время закрытия цикл не должен быть запущен, иначе произойдет остановки всех выполняющихся 
сопрограмм и ожидаемых объектов.
