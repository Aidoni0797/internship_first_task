8.7 aiohttp

Введение в aiohttp

Установка: pip install aiohttp

Импорт: import aiohttp

Для асинхронных запросов к серверу нам не подойдет стандартная библиотека requests, которой мы 
пользовались ранее. Для этого существует асинхронная библиотека запросов aiohttp.

aiohttp(documentation-https://docs.aiohttp.org/en/stable/) - асинхронный ввод/вывод для http-запросов.
Он был реализован на базе asyncio, использующей модель кооперативной многозадачности. Как мы уже знаем,
в python существует GIL, который не позволяет двум потокам работать одновременно, заставляя весь код
работать последовательно. При написании парсеров можно обойтись без асинхронного кода и писать простые 
парсеры для фриланса или для своих целей. Но пытливый ум программиста заставляет каждого из нас продолжать
учиться и совершенствовать свои навыки. Именно поэтому и был придуман модуль aiohttp для асинхронных
запросов к серверу. Aiohttp изначально создавался для высоконагруженных систем, которые должны
выдерживать огромное количество запросов в секунду, но нам он нужен для ускорения наших парсеров, с чем
данный модуль справляется на отлично.

Aiohttp имеет подробную документацию, в которой можно найти все ответы на свои вопросы, что является
дополнительным аргументом для выбора его в качестве рабочего инструмента.

Aiohttp

Сейчас будет самый простой пример асинхронного запроса. На полноценный парсер это еще не похоже, т.к.
выполняется всего один запрос, но для старта нам подойдет.

Первым делом необходимо создать сессию. Сессия обладает набором параметров по умолчанию, которые
передаются серверу с каждым запросом в рамках этой сессии. Самый важный параметр - это cookie,
которые являются общим для всех запросов сессии.

В коде ниже мы создали сессию при помощи менеджера контекста with. Это нужно для того, чтобы после
выполнения всех запросов aiohttp очистил все ресурсы.

Если у вас не запускается код ниже, то удалите следующую строку.

asyncio.set_event_loop_policy(asyncio.WindowaSelectorEventLoopPolicy())

import 
