8.5 Awaitable Objects

Awaitable-объекты - это объекты, которые ожидают результатов выполнения в других Awaitable-объектах, и
которые могут передавать управление другим Awaitable-объектам, пока бездействуют сами. И так по цепочке,
пока не будет выполнено все необходимое.

Например, вы написали код, который должен выполнить 100 запросов и получить содержимое ответа. В коде
ниже Awaitable-объектом будет служить сам запрос, из которого вы хотите получить текст, await
response.text(), все подобные запросы должны запускаться с оператором await, как в коде ниже:

async with aiohttp.ClientSession() as session:
  async with session.get(url) as response:
    soup = BeautifulSoup(await response.text(), 'lxml')

Когда Awaitable объект отправляет запрос, он сообщает в цикл событий, что он готов продолжить 
свою работу после получения ответа сервера. Цикл событий в это время имеет информацию обо всех
Awaitable-объектах, которые были запущены. Он выполнит все, или упадет с ошибкой, если не обработать
исключения (как это делать, мы будем говорить в следующих разделах курса).

3 типа Awaitable объектов

Сопрограммы

Сопрограмма, coroutine - асинхронная функция, которая создана с использованием ключевого слова 
async. Результатом выполнения любой сопрограммы является Awaitable-объект coroutine, который может
быть передан в цикл событий. По этой причине любая сопрограмма также считается Awaitable объектом.
Сопрограмма может быть вызвана в теле другой сопрограммы, для этого используется ключевое слово 
await перед вызовом вложенной сопрограммы.

import asyncio

async def nested():
  return print('Сопрограмма вызвана внутри сопрограммы async main()')

async def main():
  await nested()

asyncio.run(main())

#Результат
  Сопрограмма вызвана внутри сопрограммы async main()

Когда соопрограмма передает управление другой сопрограмме, она приостанавливается, сохраняя все 
свойства. Когда управление будет возвращено, она продолжит работать с того места, на котором 
остановилась. Таким образом возникает ощущение, что они работаю
