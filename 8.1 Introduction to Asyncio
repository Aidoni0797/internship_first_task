8.1 Introduction to Asyncio

asyncio - документация - https://docs.python.org/3/library/asyncio.html

Для изучения asyncio очень важно понимать контекст его устройства. Асинхронку невозможно понять только
по чужому коду, поэтому в этом разделе будете очень много чтения. Также настоятельно рекумендую гуглить
все понятия и детали.

Итак, асинхронная функция, она же программа, она же корутина, на же coroutine.

В соответствии с документацией, asyncio "предоставляет инфраструктуру для написания параллельного кода
с использованием сопрограмм, мультиплексирования, доступа ввода-вывода через сокеты и другие ресурсы.
Запуск серверов и других систем, нуждающихся в асинхронности. Этот раздел курса не предназначен для
охвата всего, что можно сделать с asyncio, - это очень обширная тема. Но вы уже сможете использовать
асинхронность при написании своих скрпаперов/парсеров.

В этом разделе вы научитесь понимать абстракцию и концепцию асинхронного подхода, напишите свои
первые асинхронные скрапер, изучите инструментарий, который поможет вам практиковаться и решать задачи.
Мы рассмотрим различия синхронного и асинхронного подходов, а также преимущества и недостатки
каждого из них. Проведем несколько мысленных "экспериментов" для лучшего понимания концепции
асинхронности. Изучим такие вещи как coroutines, await, event loop, aiohttp aiofile, научимся работать с
task, gather и многое, многое другое.

Для начала было бы здорово понять, что такое асинхронность, и дать ей определение. Модуль asyncio
предоставляет нам цикл событий (event loop). Большую часть времени цикл событий ожидает, пока что-то
произойдет, затем реагирует на событие, которое произошло, и возвращает результат. Это основная
концепция асинхроники, и мы будем рассматривать ее под разными углами, чтобы она стала максимально
понятна.

Модуль asyncio имеет несколько реализаций цикла событий. Какая  реализация наиболее эффективна, 
зависит от вашей операционной системы. Это происходит "под капотом", и чаще всего вам даже не стоит об
этом думать, достаточно просто знать про это. Если вам понадобится, вы можете и выбрать цикл событий
явно, но это уже после того, как вы очень хорошо разберетесь в теме.

Когда в цикле событий происходит событие А, он должен отреагировать событием Б. Представьте себе 
сервер, ожидающий, когда кто-то придет и запросит данные, например, веб-страницу. Когда сервер получил
запрос, он должен среагировать и отдать данные незамедлительно. Эта реакция известна как обработка
событий. Если ваш сервер настолько плох, что не имеет в асинхронность, он будет вызывать 1 обработчик
для 1 пользователя. Что в этом такого ужасного? - спросите вы. А теперь представьте, что в один
прекрасный день ваш сайт стал популярным и количество запросов выросло в миллион раз. Сколько времени пройдет,
пока ваш сервер дойдет до обслуживания последнего пользователя? Ответ: очень много.

Модуль asyncio призван  решать эту проблему. Если среди вас есть разработчики на Django, они знают, что
полноценную асинхронность из коробки в него добавили совсем недавно, а это означает, что знание и
понимание асинхронки дает вам несколько дополнительных баллов на собеседовании или на фрилансе.

Мысленный эксперимент №1

Когда вы запускаете синхронную программу, она выполняется последовательно. Даже с условным
ветвлением, циклами, вызовами функций ваш код будет работать шаг за шагом, программа переходит
к следующей операции только после завершения предыдущей.

Асинхронная программа ведет себя иначе, хоть она и по - прежнему может выполнять только одну операцию в
один момент времени. Ключевая разница в том, что с асинхроникой система может не ждать завершения шага,
а прерваться на выполнение другой операции, после чего вернуться, чтобы доделать первую. Когда мы 
пишем синхронный парсер, программа всегда ожидает, пока вернется ответ от сервера, после этого
совершает второй запрос, и так далее до самого конца программы. Асинхронная версия вашей программы 
будет отправлять второй запрос к серверу в тот момент, когда сервер обрабатывает первый запрос.
За счет этого и достигается высокая производительновсть асинхронного кода.

Теперь, когда вы получили базовое представление, предлагаю провести мысленный эксперимент, который
позволит еще лучше понять эту концепцию.

Итак, представьте себе, что в ваш день рождения родители решили сделать вам сюрприз и оставили дом в
вашем распоряжении для вечеринки. Вы просыпаетесь утром, дома никого и лишь записка на столе:

Сын/дочь, мы уехали на дачу, веселись с друзьями, только никакого алкоголя и аморального поведения, 
но перед тем, как пригласить своих друзей, сделай следующее:
1. Помой посуду в посудомоечной машине
2. Постирай вещи в стиральной машине
3. Достань мясо из морозилки и разморозь
4. Погуляй с собакой и проследи, чтобы она сделала все свои собачьи дела
5. И не забудь сделать уроки
6. Следи за младшим братом, чтобы с ним ничего не произошло

Наверняка ситуация знакома многим: есть много дел, каждое из которых по отдельности не требует много 
времени. Но на то он мысленный эксперимент, чтобы поставить себя в странную ситуацию. Представьте, что
вы живете в мире, где все происходит синхронно, шаг за шагом, как будто в синхронной программе.

У вас в руках список с задачами, которые необходимо выполнить во что бы то ни стало. Нет выполнения - нет 
вечеринки. В синхронном мире вы бы начали с первого пункта, загрузиди бы грязной посудой посудомоечную
машину и стояли бы перед ней, пока не завершится цикл ее работы. У вас достаточно медленная посудомеочная  
машина и ее цикл занимает от 60 до 80 минут. Когда вы прождали это время, наконец извлекли чистую посуду
и поставили ее на полку, в вашем списке осталось еще 5 пунктов. Теперь вам нужно загрузить вещи 
в стиральную машину и подождать еще от 15 до 90 минут, пока она закончит работу, - она же тоже
работает синхронно. К тому моменту, как вы закончили со стиркой, пришло уже не меньше двух часов.

Пока вы стояли столбом, ваш младший брат на пару с собакой перевернилу сервант с маминым фарфором.
Но реагировать вы не можете: вы же в синхронном мире, у вас в списке еще 4 задачи! Вместо того, чтобы
собирать осколки фарфора и поднимать шкаф, вы достаете из морозилки мясо и начинаете ждать, пока
оно разморозится. В принципе, можно забыть про следующие пункты в списке, ведь мясо может размораживаться
до самой ночи, вы же не умеете размораживать его в микроволновке или духовке, да и в инструкции про это
ничего не было сказано.

Допустим, мяса было немного и оно разморозилось за несколько часов. Ваша собака к этому времени
наложила большую кучу вместе с лужей где-нибудь на полу. К этому моменты вы со спокойной душой
собираетесь гулять с собакой, и ждете, чтобы она сделала все свои собачьи дела согласно выданной вам
инструкции. Но теперь это произойдет не скоро, возможно вообще только завтра. Да, у вс же есть младший
брат! Все жто время он был без присмотра и совершил много шалостей, за которые вам достанется от
родителей. Но вы же не могли следить за братом! Невозможно выполнить шестой пункт списка первымы, ведь
тогда вы никогда не выполните все остальные. Как же хорошо жить в асинхронному мире, где мы можем выполнять
поручения родителей в любом порядке, в котором только захотим, например, включить стиралку и посудомойку
и вместе с братом отправиьтся гулять с собакой, пока они работают.

