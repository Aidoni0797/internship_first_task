4.4 Searching for Nodes and Elements

Навигация по структуре HTML

Все примеры мы будем тестировать на нашем тренажере. - https://parsinger.ru/html/index1_page_1.html

BeautifulSoup создает объект из HTML-дерева, по которому мы можем осуществлять необходимую нам навигацию и поиск элементов.

Самые простые и понятные методы, которыми мы пользуемся, когда пишем наши парсеры, это:

- .find() - Возвращает искомый элемент, узел HTML.
- .find_all() - Возвращает список элементов. Часто используется вместе с .find()

.find()

Давайте разбираться как работает этот метод на конкретном примере

Унас есть сайт (https://parsinger.ru/html/index1_page_1.html), и мы хотим получить элемент, который имеет class= 'item'

from bs4 import BeautifulSoup
import requests

url = 'https://parsinger.ru/html/index1_page_1.html'
response = requests.get(url=url)
respoinse.encoding = 'utf-8'
soup = BeautifulSoup(response.text, 'lxml')
div = soup.find('div', 'item')
print(div)

Здесь все очень просто: мы даем указание найти конкретный div, который имеет конкретный class = 'item' Все:) В ответ получим <class 'bs4.element.Tag'>,
элемент класса bs4, с которым мы можем работать дальше.

.find_all()

Давайте посмотрим на содержимое тега, который мы получили. Видим, что мы имеем в своем распоряжении все те же элементы HTML. Давайте попробуем получить все теги <li>.
Для этого нам понадобится метод .find_all().

from bs4 import BeautifulSoup
import requests

url = 'http://parsinger.ru/html/index1_page_1.html'
response = requests.get(url=url)
response.encoding = utf-8'
