8.3 Getting Started with asyncio

Asyncio начало

К этому моменту у вас уже сформировалось понимание того, как работают синхронность и асинхронность.
Помимо этого существуют такие понятия как многопоточность, конкурентность и параллелизм, и их тоже
нужно понимать.

Синхронность и асинхронность и могут работать как однопоточно,так и многопоточно.

Синхронность/однопоточность - это программная модель, в которой потоку назначается только одна задача
в единицу времени, после чего начинается ее выполнение. Когда завершено выполнение первой задачи,
начинается выполнение второй, и так далее до завершения всех задач. В этой модели невозможно 
остановить выполнение задачи для того, чтобы выполнить другую задачу. При синхронных запросах большую
часть времени код ничего не делает, только ждет ответа от сервера, что существенно его замедляет.
Это наглядно продемонстрировано на рисунке ниже. Так происходит потому, что в Питоне есть GIL
(Global Interpreter Lock - https://ru.wikipedia.org/wiki/Глобальная_блокировка_интерпретатора),
который предоставляет доступ к интерпретатору только одному потоку в единицу времени, и этот доступ
разблокируется только когда выполнение задачи завершится. Про GIL мы еще подробнее поговорим в одном
из следующих степов.

Пример синхронного выполнения запросов
Поток 1
- запрос
- ожидание ответа от сервера
- получение ответа от сервера

Асинхронность, в отличие от синхронной модели, может приостановить выполнение задачи и передать 
управление другой, при этом сохранив текущее состояние, после чего вернуться к выполнению первой
задачи. Переключение между задачами происходит в момент простоя первой задачи. Например, был
отправлен запрос к серверу, а пока мы ждем ответ, управление передается второй задаче.

Запрос к серверу - это очень короткая по времени операция, но когда ваш парсер будет делать тысячи
запросов в асинхронном режиме, при этом во время ожидания ответа мы будем делать другие запросы,
скорость вашего парсера может вырасти больше чем в 20 раз.

На картинке ниже видно, что при асинхронном выполнении запросов время ожидания заполнено другими
запросами или получением ответа сервера. На практике порядок выполнения запросов может быть
совершенно другой, это зависит от скорости от вета сервера.

Пример асинхронного выполнения запросов

Поток1
- запрос
- получение ответа от сервера

Если ваша цель - написать асинхронный многопоточный код, то выглядеть он будет вот так. Обратите
внимание, Task1, Task2, Task3 и другие обрабатываются несколькими потоками, запускаются в одном потоке,
а завершаются в другом. Это наглядно демонстрирует максимальное использование потоков.

На изображении ниже наглядно изображено отличие двух этих моделей.

В асинхронной модели переключение между запросами\задачами происходит в тех местах, где мы указываем 
ключевое слово await.

Для закрепления запустите этот код у себя в терминале. Смело можете добавлять любое количество сайтов
в список urls. Вникать в код сейчас не нужно, дальше мы разберем его еще раз, максимально подробно.
Сейчас нужно просто понять, как происходят запросы и переключения между ними.

Если у вас не запускается код ниже, то удалите следующую строку.

asyncio.set_event_loop_policy(asyncio.WindowsSelector)

import asyncio
import aiohttp
from codetiming import Timer

urls = [
    "http://google.com",
    "http://yahoo.com",
    "http://apple.com",
    "http://microsoft.com",
    "https://habr.com",
    "https://www.youtube.com/",
    "https://stepik.org",
    "https://docs.python.org",
    "https://stackoverflow.com/",
    "https://www.reg.ru"
]

async def fetch_url(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            print(resp.url)

async def main():
    with Timer(text="Затрачено времени на запросы: {:.3f} сек"):
        tasks = [asyncio.create_task(fetch_url(link)) for link in urls]
        await asyncio.gather(*tasks)

if __name__ == '__main__':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())


Ожидаемый результат:
>>>
https://stepik.org
https://www.youtube.com/
https://www.reg.ru
https://docs.python.org/3/
https://habr.com/en/feed/
http://www.google.com/
https://stackoverflow.com/questions
https://www.apple.com/
https://www.microsoft.com/ru-kz/
https://www.yahoo.com/
Затрачено времени на запросы: 1.715 сек

Результат выполнения этого кода будет всегда райзный и
