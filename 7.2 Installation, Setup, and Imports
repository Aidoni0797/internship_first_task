7.2 Installation, Setup, and Imports

Singing in Telegram

Прежде чем работать с API telegram client, необходимо получить собственный API ID and Hash. Эти параметры
выдаются при регистрации в инструментах разработчика.

1. Переходим по ссылке (https://my.telegram.org/auth?to=apps) (что за ссылка это iDONi Бог знает)
и указываем номер, который вы хотите использовать для мониторинга групп. Можно указать телефон
с действующим аккаунтом в Telegram. После ввода номера телефона, вам в Telegram поступит секретный
код, его нужно ввести в поле "Код подтверждения".

2. После того как вы ввели корректный код подтверждения и вошли в свою учетную запись Telegram,
вам необходимо зарегистрировать новое приложение.

- App title - указываете название для вашего приложения;
- Short name - указываете сокращенное имя для вашего приложения;
- URL - можно оставить пустым;
- Platfom - выбираете Other (specify in description);
- Description - можно оставить пустым.

3. Когда вы заполнили все необходимые поля и нажали на кнопку Create application, сохраните все данные на
этой странице к себе в блокнот, а для наших целей хватит всего 2х полей, api_id, and api_hash, 
их мы и будем использовать. После того как скопировали все данные в файл, нажимаем на кнопку
Save changes и закрываем вкладку браузера.

Установка и импорт библиотеки

Установка

pip install telethon или pip3 install telethon

Импорт

from telethon import TelegramClient, events, sync, connection


Первый запуск

После установки  и импорта можно запустить свой первый код. Запустите этот куда у себя в терминале и введите номер
телефона, который вы вводили на первом этапе.

Двухфакторная аутентификация не позволит вам авторизоваться, поэтому, перед первым запуском ее
необходимо отключить.

from telethon import TelegramClient, events, sync, connection

api_id = 12345 #Тут укажите полученный ранее api
api_hash = '0123456789abcdef0123456789abcdef' # Тут укажите полученный ранее hash

client = TelegramClient('session_name', api_id, api_hash)
client.start()
print(client.get_me())
client.disconnect()

>>>

Когда вы введете номер. Telegram пришлет вам токен авторизации. Вставьте его в консоль и выполните этот
код снова. В ответ вы получите кортеж с данными о вашей учетной записи Telegram. Если вы получили эти,
данные, то поздравляю, у вас все получилось.

Давайте детально рассмотрим, что здесь написано. Переменная api_id = 12345 хранит ваш персональный ID,
который вы создали на предыдущем шаге. Переменная api_hash = '0123456789abcdef0123456789abcdes' хранит 
ваш персональный хэш, который вы также создали на предыдущем шаге. 
client = TelegramClient('session_name', api_id, api_hash) - в переменной client мы создали экземпляр
класса TelegramClient, к которому мы будем применять все методы библиотеки Telethon, где 'session_name'
любое имя для сессии. .client.start() - непосредственно запуск самой сессии.

UDP:

telethon.errors.rpcerrorlist.ApiIdInvalidError: THe api_id/api_hash combination is invalid (caused
by SendCodeRequest)

Если вы стоклнулись с данной ошибкой, то решить её можно, отключив в настройках телеграмма 
двухфакторную авторизацию в настройках конфиденциальности.


Основные методы Telethon

Здесь будут храниться основные методы, которые могут вам понадобиться для выполнения задач и которые
чаще всего используются во время парсинга. Остальные можно найти в джокументации.(https://docs.telethon.dev/en/stable/quick-references/client-reference.html)

Все методы применяются к экземпляру класса client = TelegramClient('session_name', api_id, api_hash).

В библиотеке Thelethon, а точнее в ее документации, почти все объекты обозначаются словом entity. 
Для работы многих методов и запросов требуются сущности entity. Entity - это не какой-то определенный объект
библиотеки Telethon, а скорее слово, которое можно перевести как объект, сущность, организация, существо,
вещь. Например, когда вам нужно отправить запрос, вы отправляете сущность entity, когда получаете объект,
это тоже сущность entity. Есть множество вещей, которые работают как сущность entity - имена
пользователей, номера телефонов, ссылка на чат, ссылки-пирглашения, идентификаторы. Замените для себя
слово entity на слово объект, смысл не меняется.

Авторизация

- client.start(entity) - запускает клиент (подключается и авторизуется при необходимости), создаёт файл
*.session;
- client.send_code_request(entity) - отправляет код Telegram, необходимый для входа на указанный номер телефона;
- client.sign_in(entity) - авторизуется в Telegram под существующей учетной записью пользователя или бота;
- client.qr_login(entity) - инициирует процедуру входа в систему QR;
- client.log_out(entity) - выходит из Telegram и удаляет текущий *.session - файл.

База

- client.connect(entity) - подключается к Телеграму;
- client.disconnect(entity) - отключается от Телеграм;
- client.is_connected(entity) - возвращает True, если пользователь подключился;
- client.disconnected(entity) - свойство с а Future, которое разрешается при отключении;
- client.loop(entity) - свойство с asyncio - циклом событий, используемым этим клиентом;
- client.set_proxy(entity) - изменяет прокси, который будет использоваться при следующем 
(повторном) подключении.

Сообщения

- client.send_message(entity) - отправляет сообщение указанному пользователю, чату или каналу;
- client.edit_message(entity) - редактирует данное сообщение, чтобы изменить его текст или медиа;
- client.delete_messages(entity) - удаляет указанные сообщения, опционально "для всех";
- client.forward_mess
