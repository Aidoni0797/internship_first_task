5.5 Selenium Methods

Основные методы Selenium

В своем распоряжении Selenium имеет большое количество методов, которые мы можем использовать. Здесь
будут размещены почти все из них. Но, как показывает практика, пользоваться вы будете малой их частью.
Про одни методы вы должны просто знать, что они существуют, про другие методы вам скорее всего даже
вспоминать не придется, а какие-то методы очень полезны и мы порешаем задачки с их помощью, чтобы
лучше закрепить их в памяти.

- webdriver.back() - вернуться назад, равнозначно стрелочке "назад" в браузере;
- webdriver.forward() - вернутся вперёд, равнозначно стрелочке "вперёд" в браузере;
- webdriver.refresh() - обновляет активную страницу в браузере, равнозначно стрелдочке обновить;
- webdriver.get_screenshot_as_file("../file_name.jpg") - ожидает полной загрузки страницы и сохраняет
скриншот в указанной папке. Возвращает False, если есть ошибка ввода-вывода, иначе возвращает True;
- webdriver.save_screenshot("file_name.jpg") - ожидает полной загрузки страницы и сохраняет скриншот в
папке с проектом;
- webdriver.get_schreenshot_as_png() - сохраняет скриншот в виде двоичных данных, которые можно
передать или сохранить в файл в конструкторе with/as;
- webdriver.get_screenshot_as_base64() - после загрузки страницы, получает скриншот текущего окна в виде
строки в кодировке base64. Полезно во встроенных изображениях в HTML;
- webdriver.get("http://example_url.ru") - метод получает ссылку, которая откроется в браузере;
- webdriver.quit() - метод разрывает все соединения, установленные браузером, очищает после себя
оперативную память;
- webdriver.close() - закрывает текущую вкладку;
- webdriver.excute_script("script_code") - исполняет на странице переданный JavaScript код;
- webdriver.execute_async_script("script_code", *args) - асинхронно выполняет код JavaScript на 
странице;
- webdriver.set_page_load_timeout() - устанавливает timeout ожидания загрузки страницы, после чего
выбрасывает исключение;
- webdriver.find_element("element" or "locator- By.") - возвращает resultSet найденных элементов,
с ним можно работать как со списком;
- webdriver.find_elements("element", or "locator- By.") - возвращает resultSet найденных элементов, с
ним можно работать как со списком;
- webdriver.get_window_position() - возвращает позицию открытого окна браузера, возвращается словарь
{'x':10, 'y':50};
- webdriver.maximize_window() - разворачивает текущее окно;
- webdriver.minimize_window() - сворачивает текущее окно;
- webdriver.fullscreeen_window() - максимизирует активное окно браузера, аналогично нажатию клавиши F11;
- webdriver.get_window_size() - получает текущий размер окна браузера + рамки окна и панель управления
браузера, возвращает словарь {'width':945, 'height': 1020};
- webdriver.set_window_size(800,600) - устанавливает высоту и ширину браузера;
- webdriver.get_cookies() - возвращает словарь с cookies;
- webdriver.get_cookies(name_cookie) - возвращает набор cookie по его имени;
- webdriver.add_cookie(cookie_dict) - добавляет cookie к вашему текущему сеансу;
- webdriver.delete_cookie(name_cookie) - удаляет cookie с заданным именем;
- webdriver.delete_all_cookies() - удаляет все фаайлы cookie в рамках текущего сеанса;
- webdriver.implicitly_wait(10) - устанавливает неявное ожидание поиска элемента, или для команды
завершения;


Cookies

Куки (cookie, букв. - "печенье") - небольшой фрагмент данных, отправленный веб-сервером и хранимый на
компе пользователя. Когда вы открываете сайт, сервер отправляет вашему браузеру данные, которые
хранятся в его памяти.

Куки чаще всего используются для:
- Аутентификации пользователя;
- Хранение личных настроек на сайте, к примеру, темная тема или сохранение товаров в корзине, если вы не 
залогинились на сайте;
- Отслеживание состояния сеанся доступа пользователя;
- Сведения статистики о пользователях;
- Хранения информации о местоположении пользователя и IP-адресе;
- Клики и переходы;
- Сведений операционной системы и браузера;
- И многое другое.

Cookies не являются персональными данными, так как в законе сказано, что персональные данные - это
информация, позволяющая идентифицировать человека. Даже фамилия, имя и отчество могут не являться
персональными данными, если требуются дополнительные сведения, чтобы определить личность человека.
Не говоря уже о cookies.

Существует два вида cookis:
- Сессионные (временные) - хранят в себе информацию, которая актуальна ближайшее время, к примеру, 
к таким данным можно отнести записи форм, полей, время пребывание на сайте. Чаще всего они существуют,
пока вы находитесь на сайте, и удаляются, как только вы его покидаете;
- Постоянные - это куки, которые моогут хранится в ващем браузере очень долго, например, логин от вашей
учетной записи на сайте или другие данные, которые связаны с вашей учетной записью. Например, данные
о вашем местоположении в учетной записи гугла.

Чтобы увидеть, какие cookie сохраняет сайт в вашем браузере, вам нужно открыть инструмент разработчика
клавишей F12.

В Selenium мы можем получить доступ ко всем cookie сразу в виде словаря, либо к конкретному полю, об этом
с следующих степах.

Cookies на практике

.get_cookies()

В коде ниже использован метод .get_cookies(), который получает список всех cookie на странице. Выполните
код ниже у себя в терминале.

from pprint import pprint
from selenium import webdriver

with webdriver.Chrome() as webdriver:  
  webdriver.get('https://ya.ru/')
  cookies = webdriver.get_cookies()
  pprint(cookies)

>>>
[{
'domain': '.ya.ru',
'expiry':1685518907,
'httpOnly':False,
'name':'_ym_d',
'path':'/',
'sameSite':'None',
'secure':True,
'value':'1653982908'},
...
{
'domain': '.ya.ru',
'expiry':1656574906,
'httpOnly':False,
'name':'yandex_gid',
'path':'/',
'sameSite':'None',
'secure':True,
'value':'239'}]

.get_cookie(name_cookie)

В отличие от первого метода, этот метод находит и возвращает cookie по его имени. Есть два способа
оперделить имя.

- Способ №1 - этот способ не очень надежен, т.к. с "живого" браузера данные в cookies могут отличаться в
зависимости от открытой сессии. Но если ваш код не зависит от параметров сессии, то можно получить имена
cookie именно в браузере;

Способ №2 - мы можем в цикле for/in итерироваться по списку cookie, который мы получили с помощью метода
.get_cookies(). Этим способом мы можем получить не только имя cookie, но и его значение.

. from selenium import webdriver

with webdriver.Chrome() as webdriver:
  webdriver.get('https://ya.ru/')
  cookies = webdriver.get_cookies()
  for cookie in cookies:
    print(cookie['name']) # cookie['value'] чтобы получить их значение

>>>
_ym_d, _ym_isad, _ym_uid, my, gdpr, _yasc, i, is_gdpr, yuidss
yabs-frrequence, is_gdpr_b, yandexuid, yp, mda, ymex, yandex_gid

- Когда мы знаем имена cookie на странице, мы можем получить нужные нам данные по ключу
