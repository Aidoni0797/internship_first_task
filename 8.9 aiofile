8.9 aiofile

Aiofiles введение

Установка
pip install aiofiles
Импорт
import aiofiles

Aiofiles(документация - https://github.com/Tinche/aiofiles) - отличная библиотека для асинхронного
скачивания медиа-файлов из сети интернет. С ее помощью мы можем ускорить загрузку файлов и чтение
больших текстовых файлов практически в 10 раз. В этом разделе курса мы сравним синхронный и 
асихронный способы скачивания изображений и видео с нашего сайта-тренажера, чтобы наглядно
продемонстрировать разницу в скорости.

Aiofiles может работать не только с файлами, которые хранятся на вашем компьютере, прелесть работы
с этой библиотекой в том, что она умеет работать с response.content, а этот именно то что нужно для создания
асинхронной загрузки файлов.

Функция open() из aiofiles работает почти так же, как и привычная всем синхронная функция open(),
встроенная в Python. Мы можем использовать асихронную версию функцию open() как с менеджером
контекста with, так и без него.

Простой пример использования aiofiles
import aiofiles
import asyncio

C использованием менеджера контекста with

async with aiofiles.open('filename', mode='r') as f:
  contents = await f.read()
print(contents)

Результат
  'My file contents'

Без использования менеджера контекста with

file = await aiofiles.open('filename', mode='r')
contents = await file.read()
file.close()
print(contents)

При использовании асинхронной функции open() из библиотеки aiofiles необходимо закрывать файл
file.close(), в том случае если мы не использовали контекстный менеджер with. С применением
контекстного менеджера with файл закроется самостоятельно после прочтения файла.

Асинхронная функция open() имеет такие же атрибуты, как ее синхронный брат.

- aiofiles.open('folder/file.txt') - абсолютное или относительное значение пути к файлу;
- aiofiles.open(mode='') - необязательный атрибут, который указывает режим работы с файлом
- mode = 'r' - открывает файл только для чтения, установлен по умолчанию;
- mode = 'w' - открывает файл  для записи, существующий файл будет перезаписан, а если файл существует,
то он будет создан;
- mode = 'x' - бросает исключение FileExistsError, если файл с таким именем уже существует;
- mode = 'a' - открывает файл для добавления данных в конец файла;
- mode = 't' - символ текстового режима;
- mode = 'b' - символ двоичного режима, для записи медиа-файлов;
- mode = 'wb' - открывает файл для записи в бинарном режиме, именно этот режим мы будем использовать
для скачивания файлов;
- aiofiles.open(buffering = -1) - не обязательный аргумент, используется для политики буферизации;
- buffering = -1 - значение по умолчанию;
- buffering = 0 - построчная буферизация, только для бинарного режима;
- buffering = 1 - построчная буферизация для текстовго файла;
- encoding='utf-8' - необязательный аргумент, используется для кодирования или декодирования файла, 
этот аргумент следует использовать только для текстовго файла;
- errors = None - None по умолчанию, необязательный аргумент, указывает, как должны обрабатываться ошибки
кодирования и декодирования, только для текстовых файлов;
- errors = 'strict' - бросает исключение ValurError, то же самое что и None;
- errors = 'ignore' - игнорирует ошибки кодирования, данные могут быть потеряны;
- errors = "surrogateescape" - любые некорректные байты будут представлены как символы 
